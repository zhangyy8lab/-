// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: pb/Prod.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// T2ServiceClient is the client API for T2Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type T2ServiceClient interface {
	GetMsg(ctx context.Context, in *T2Request, opts ...grpc.CallOption) (*T2Response, error)
}

type t2ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewT2ServiceClient(cc grpc.ClientConnInterface) T2ServiceClient {
	return &t2ServiceClient{cc}
}

func (c *t2ServiceClient) GetMsg(ctx context.Context, in *T2Request, opts ...grpc.CallOption) (*T2Response, error) {
	out := new(T2Response)
	err := c.cc.Invoke(ctx, "/pb.T2Service/GetMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// T2ServiceServer is the server API for T2Service service.
// All implementations must embed UnimplementedT2ServiceServer
// for forward compatibility
type T2ServiceServer interface {
	GetMsg(context.Context, *T2Request) (*T2Response, error)
	mustEmbedUnimplementedT2ServiceServer()
}

// UnimplementedT2ServiceServer must be embedded to have forward compatible implementations.
type UnimplementedT2ServiceServer struct {
}

func (UnimplementedT2ServiceServer) GetMsg(context.Context, *T2Request) (*T2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMsg not implemented")
}
func (UnimplementedT2ServiceServer) mustEmbedUnimplementedT2ServiceServer() {}

// UnsafeT2ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to T2ServiceServer will
// result in compilation errors.
type UnsafeT2ServiceServer interface {
	mustEmbedUnimplementedT2ServiceServer()
}

func RegisterT2ServiceServer(s grpc.ServiceRegistrar, srv T2ServiceServer) {
	s.RegisterService(&T2Service_ServiceDesc, srv)
}

func _T2Service_GetMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(T2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(T2ServiceServer).GetMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.T2Service/GetMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(T2ServiceServer).GetMsg(ctx, req.(*T2Request))
	}
	return interceptor(ctx, in, info, handler)
}

// T2Service_ServiceDesc is the grpc.ServiceDesc for T2Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var T2Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.T2Service",
	HandlerType: (*T2ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMsg",
			Handler:    _T2Service_GetMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/Prod.proto",
}
