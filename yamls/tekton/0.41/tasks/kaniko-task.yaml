apiVersion: tekton.dev/v1beta1
kind: Task 
metadata:
  name: build-and-push
  labels:
    app.kubernetes.io/version: "0.6"
  annotations:
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/categories: Image Build
    tekton.dev/tags: image-build
    tekton.dev/displayName: "Build and upload container image using Kaniko"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    This Task builds a simple Dockerfile with kaniko and pushes to a registry.
    This Task stores the image name and digest as results, allowing Tekton Chains to pick up
    that an image was built & sign it.
  params:
    - name: imageName
      description: Name (reference) of the image to build.
    - name: imageTag
      description: Tag (reference) of the image to build.
    - name: dockerfile
      description: Path to the Dockerfile to build.
      default: ./Dockerfile
      type: string
    - name: context
      description: The build context used by Kaniko.
      default: ./
      type: string
    - name: buildImage
      description: The image on which builds will run (default is v1.5.1)
      default: octahub.8lab.cn:5000/tekton/executor:v1.8.1-debug
     #default: gcr.lank8s.cn/kaniko-project/executor:latest
      type: string
    - name: registry
      description: Address of the image warehouse used
      type: string
  workspaces:
    - name: git-source
      description: Holds the context and Dockerfile
    - name: dockerconfig
      description: Includes a docker `config.json`
      optional: true
      mountPath: /kaniko/.docker
  results:
    - description: cache imagename
      name: cacheImage
    - name: imageDigest
      description: Digest of the image just built.
    - name: imageURL
      description: URL of the image just built.
  steps:
    - name: build-and-push
      workingDir: $(workspaces.git-source.path)
      image: $(params.buildImage)
      command:
      - /kaniko/executor
      args:
        - --insecure=true
        - --insecure-pull=true
        - --insecure-registry=$(params.registry)
        - --dockerfile=$(params.dockerfile)
        - --context=$(workspaces.git-source.path)/$(params.context) # The user does not need to care the workspace and the git-source.
        - --destination=$(params.registry)/$(params.imageName):$(params.imageTag)
        - --digest-file=$(results.imageDigest.path)
        - --cache=true
        - --cache-dir=/cache
        - --compressed-caching=false
        - --cache-repo=octahub.8lab.cn:5000/kaniko-cache/$(params.imageName)/cache
      securityContext:
        runAsUser: 0
      volumeMounts:
      - mountPath: /cache
        name: kaniko-cache
      - mountPath: /etc/hosts
        name: hosts
    - name: write-url
      image: octahub.8lab.cn:5000/base/ubuntu:18.04
      workingDir: $(workspaces.git-source.path)
      script: |
        #!/usr/bin/env bash
        set -e
        image="$(params.registry)/$(params.imageName):$(params.imageTag)"
        echo -n `cat $(params.dockerfile) |grep -i ^FROM|awk -v OFS='' '{if (NR == 1){print $2}}'` |tee "$(results.cacheImage.path)"
        echo -n "${image}" | tee "$(results.imageURL.path)"
  volumes:
  - hostPath:
      path: /data/kaniko-cache
    name: kaniko-cache
  - name: hosts
    hostPath:
      path: /etc/hosts
