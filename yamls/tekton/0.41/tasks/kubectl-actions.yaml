apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: continuous-deploy
  labels:
    app.kubernetes.io/version: "0.2"
  annotations:
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/categories: Kubernetes
    tekton.dev/tags: CLI, kubectl
    tekton.dev/displayName: "kubernetes actions"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    This task is used to update the container image of the specified application
 #workspaces:
 #  - name: manifest-dir
 #    optional: true
 #  - name: kubeconfig-dir
 #    optional: true
  results:
    - name: output-result
      description: some result can be emitted if someone wants to.
  params:
    - name: fullImageName
      description: full image name 
      default: ""
    - name: imageName
      description: Name (reference) of the image to build.
    - name: imageTag
      description: Tag (reference) of the image to build.
    - name: registry
      description: Address of the image warehouse used
    - name: resourceKind
      description: Type of application to be updated
    - name: resourceName
      description: Name of application to be updated
    - name: containerName
      description: Name of the container in the application to be updated 
      type: array
    - name: actionImage
      #default: gcr.lank8s.cn/cloud-builders/kubectl@sha256:8ab94be8b2b4f3d117f02d868b39540fddd225447abf4014f7ba4765cb39f753 #image is huge
      default: octahub.8lab.cn:5000/tekton/kubectl:v18.2 
      description: Kubectl wrapper image
  steps:
    - name: kubectl
      image: $(params.actionImage)
      script: |
        #!/usr/bin/env bash
        set -eu
        #[[ "$(workspaces.manifest-dir.bound)" == "true" ]] && \
        #cd $(workspaces.manifest-dir.path)
        #[[ "$(workspaces.kubeconfig-dir.bound)" == "true" ]] && \
        #[[ -f $(workspaces.kubeconfig-dir.path)/kubeconfig ]] && \
        #export KUBECONFIG=$(workspaces.kubeconfig-dir.path)/kubeconfig
        echo "CertData"|base64 -d > /tmp/crt
        echo "KeyData" |base64 -d > /tmp/key
        export fullImageName=$3
        if test -z fullImageName
        then
          fullImageName=$4
        fi

        for i in `seq $#`
        do
          [[ $i -le 4  ]] && continue
          ARGs+="`eval echo '$'"{$i}"`=$fullImageName "
        done

        kubectl --certificate-authority /run/secrets/kubernetes.io/serviceaccount/ca.crt \
                --server https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT \
                --client-certificate /tmp/crt --client-key /tmp/key \
                -n `cat /run/secrets/kubernetes.io/serviceaccount/namespace` set image $1  $2 $ARGs
        echo "containerName=imageName" $ARGs |xargs -n1
      args:
        - "$(params.resourceKind)"
        - "$(params.resourceName)"
        - "$(params.registry)/$(params.imageName):$(params.imageTag)"
        - "$(params.fullImageName)"
        - "$(params.containerName)"
